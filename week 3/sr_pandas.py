
# coding: utf-8

# <p style="align: center;"><img src="https://static.tildacdn.com/tild6636-3531-4239-b465-376364646465/Deep_Learning_School.png", width=300, height=300></p>
# 
# <h3 style="text-align: center;"><b>Физтех-Школа Прикладной математики и информатики (ФПМИ) МФТИ</b></h3>

# <h2 style="text-align: center;"><b>Библиотека <a href="http://pandas.pydata.org/">pandas</a></b></h2>

# Библиотека `pandas` активно используется в современном data science для работы с данными, которые могут быть представлены в виде таблиц (а это очень, очень большая часть данных)

# `pandas` есть в пакете Anaconda, но если вдруг у Вас её по каким-то причинам нет, то можно установить, раскомментировав следующую команду:

# In[ ]:


#!pip install pandas


# In[23]:


import pandas as pd
import numpy as np


# Нужны данные. Про AppStore слышали? :)

# ### Скачать данные: https://www.kaggle.com/ramamet4/app-store-apple-data-set-10k-apps

# Нас интересует файл `AppStore.csv`.

# Кстати, `.csv` (Comma Separated Values) - наверное, самый частый формат данных в современном data science. По сути, это то же самое, что и `.xls` (и `.xlsx`), то есть таблица. 

# Итак, *чтение файла с данными*:

# In[2]:


data = pd.read_csv('./app-store-apple-data-set-10k-apps/AppleStore.csv')


# Посмотрим, что же такое переменная `data`:

# In[3]:


data


# In[4]:


type(data)


# Тип == `pandas.core.frame.DataFrame`, обычно говорят просто "датафрейм", то есть "кусок данных".

# Можно вывести информацию по датафрейму:

# In[5]:


data.info()


# И более статистически значимую информацию:

# In[6]:


data.describe()


# Итак, наши данные -- это какая-то **информация про приложения в AppStore**. Давайте посмотрим, что тут есть:

# In[7]:


# все столбцы датафрейма (названия)
data.columns


# ---

# #### Задание 0

# О чём данные? (судя по столбцам)

# ---

# Все значения датафрейма:

# In[8]:


# одна строка == описание одного объекта, в данном случае -- приложения из AppStore
data.values


# In[9]:


data.values[0]


# In[10]:


data.shape


# -- то есть 7197 строк и 17 столбцов.

# Важно уметь обращаться к определённой строке или столбцу dataframe'а. Индексирование очень похоже на numpy, однако есть свои тонкости:

# * Получить весь столбец (в даном случае столбец 'track_name'):

# In[11]:


data['track_name']


# In[12]:


type(data['track_name'])


# In[13]:


data['track_name'][0]


# `pandas.core.series.Series` -- это тип подвыборки датафрейма. С этим типом работают реже, но стоит знать, что он есть.

# * Получить определённую строку:

# In[14]:


data.iloc[10]


# Более продвинутое и полезное индексирование:

# In[15]:


data.iloc[5, 10]


# -- `data.iloc[i, j]`, где `i` -- номер строки, `j` -- номер столбца

# Почти все типы индексирования:

# * к строкам по числовому индексу, к столбцам -- по имени

# In[16]:


data.loc[[0, 1, 2], ['track_name', 'id']]


# * к строкам и к столбцам по числовому индексу

# In[17]:


data.iloc[[1, 3, 5], [2, 1]]


# * поддерживает и то, и то, но **запрещён**:

# In[18]:


data.ix[[2,1,0], ['track_name', 'id']]


# In[19]:


data.ix[[0,1,2], [2, 1]]


# Точно также дело обстоит со **срезами**:

# In[20]:


data.iloc[5:100, 0:5]


# Но обычно нужно уметь отвечать на более осмысленные вопросы, например:

# * сколько приложений имеют рейтинг юзеров >= 4?

# In[21]:


len(data[data['user_rating'] >= 4])


# * какие есть валюты в столбце currency?

# In[24]:


np.unique(data['currency'])


# * сколько приложений жанра Games? А тех, которые Games и рейтинг >= 4?

# In[25]:


# 1
len(data[data['prime_genre'] == 'Games'])


# In[26]:


# 2
len(data[(data['user_rating'] >= 4) & (data['prime_genre'] == 'Games')])


# Оператор "ИЛИ" аналогично &, только он через |

# In[27]:


len(data[(data['user_rating'] >= 4) | (data['prime_genre'] == 'Games')])


# ---

# #### Задание 1

# Получите ответ на следующие вопросы (с помощью pandas):
# 
# 1). Сколько всего жанров и какие они?  
# 2). Сколько суммарно байт весят все приложения жанра Finance?  
# 3). Сколько всего бесплатных приложений, у которых рейтинг юзеров больше трёх?  
# 4). Есть ли приложения, которые стоят больше 100 долларов?

# In[36]:


# 1 Сколько всего жанров и какие они?

len(data["prime_genre"].unique())


# In[39]:


# 2 Сколько суммарно байт весят все приложения жанра Finance?

data[data["prime_genre"] == "Finance"].size_bytes.sum()


# In[42]:


# Сколько всего бесплатных приложений, у которых рейтинг юзеров больше трёх?

data[(data["price"] == 0) & (data["user_rating"] > 3)].shape[0]


# In[44]:


# 4 Есть ли приложения, которые стоят больше 100 долларов?

data[(data["price"] > 100)]


# ---

# Часто надо сделать что-то такое:

# In[45]:


import numpy as np


# In[46]:


np.array(data['size_bytes'])


# То есть взять столбец из таблицы и засунуть его в np.array(). Это можно сделать и просто обратившись к .values, ведь его тип и есть np.array:

# In[47]:


type(data['size_bytes'].values)


# Больше про pandas можно найти по этом полезным ссылкам:

# * Официальные туториалы: http://pandas.pydata.org/pandas-docs/stable/tutorials.html

# * Статья на Хабре от OpenDataScience сообщества: https://habr.com/company/ods/blog/322626/

# * Подробный гайд: https://media.readthedocs.org/pdf/pandasguide/latest/pandasguide.pdf

# Главное в работе с новыми библиотеками -- не бояться тыкать в разные функции, смотреть типы возвращаемых объектов и активно пользоваться Яндексом, а ещё лучше понимать всё из docstring'а (`Shift+Tab` при нахождении курсора внутри скобок функции).
